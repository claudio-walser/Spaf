<?php
/**
 * $Id$
 * Database fluent query class
 *
 * @created 	THu Aug 12 05:25:27 CET 2010
 * @author 		Claudio Walser
 * @reviewer 	TODO
 * @package		\Cwa\Library\Orm\Runtime
 * @namespace	\Cwa\Library\Orm\Runtime\Query
 */
namespace Cwa\Library\Orm\Runtime\Query;

/**
 * Cwa\Library\Orm\Runtime\Query\FluentInterface
 *
 * The fluent query class.
 * A mapper for the criteria class.
 * Criteria still builds ther query
 * but with this fluent interface its nicer to work.
 *
 * @todo		Add inArray method
 * @author 		Claudio Walser
 */
class FluentInterface {

	/**
	 * The criterion object to work with
	 *
	 * @var		Cwa\Library\Orm\Runtime\Query\Criteria
     */
	private $_criteria = null;

	/**
	 * The table name to select from
	 *
	 * @var		string
     */
	private $_from = '';
	
	/**
	 * The closure function for returning
	 * model objects at least.
	 * Usually this is a function what calls
	 * a Model\Query\*::doSelect with the
	 * internal Criterion object.
	 *
	 * @var		Function
     */
	private $_executeClosure = null;
	
	/**
	 * Constructor
	 * Instantiates the class and
	 * stores the criteria and the execute closure
	 * in properties.
	 * The closure function is a doSelect method of a Model\Query\Class
	 * Usually, you dont care about if you call the static create function of 
	 * a model query class. This create Method is created and generated by 
	 * the ORM Generator
	 *
	 * @author		Claudio Walser
	 * @see			Cwa\Library\Orm\Runtime\Query\FluentInterface::execute
	 * @see			Model\Query\*::create
	 * @param		closure								The doSelect method of a model query class or any other method. First and only parameter passed to this function is a criteria object
	 */
	public function __construct($executeClosure) {
		$this->_executeClosure = $executeClosure;
		$this->_criteria = new Criteria();
	}
	
	/**
	 * Create Select statement
	 * Add some columns into a select statement
	 * Returns the own object for fluent interface.
	 *
	 * @author	Claudio Walser
	 * @param 	mixed			Array with columns or sql string
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function select($columns) {
		$this->_criteria->setCols($columns);
		return $this;
	}
	
	/**
	 * Adds another from
	 *
	 * This method just adds another from. Usually the from is coming
	 * from Query Class create method.
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	mixed			Array with tablenames or dirctly the sql string. Care about the main table name, which is first for sure"
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function from($from) {
		$this->_criteria->addFrom($from);
		return $this;
	}

	/**
	 * Adds a where condition
	 *
	 * This method just adds a where and its condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Value			
	 * @param 	string		Operator, default value is =			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function where($col, $value, $operator = '=') {
		$this->_criteria->add($col, $value, $operator);
		return $this;
	}

	/**
	 * Adds an AND condition to an existent where
	 *
	 * This method just adds another where AND condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Value			
	 * @param 	string		Operator, default value is =			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function andWhere($col, $value, $operator = '=') {
		$this->_criteria->addAnd($col, $value, $operator);
		return $this;
	}

	/**
	 * Adds an OR condition to an existent where
	 *
	 * This method just adds another where OR condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Value			
	 * @param 	string		Operator, default value is =			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function orWhere($col, $value, $operator = '=') {
		$this->_criteria->addOr($col, $value, $operator);
		return $this;
	}
	
	/**
	 * Adds a WHERE LIKE condition
	 *
	 * This method adds a WHERE LIKE condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Value			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function like($col, $value) {
		$this->_criteria->like($col, $value);
		return $this;
	}

	/**
	 * Adds a AND LIKE condition
	 *
	 * This method adds a AND LIKE condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Value			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function andLike($col, $value) {
		$this->_criteria->likeAnd($col, $value);
		return $this;
	}

	/**
	 * Adds a OR LIKE condition
	 *
	 * This method adds a OR LIKE condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Value			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function orLike($col, $value) {
		$this->_criteria->likeOr($col, $value);
		return $this;
	}
	
	/**
	 * Adds a LEFT JOIN condition
	 *
	 * This method adds a LEFT JOIN condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Foreign tablenname			
	 * @param 	mixed		The ON condition			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function leftJoin($table, $condition) {
		$this->_criteria->leftJoin($table, $condition);
		return $this;
	}
	
	/**
	 * Adds a RIGHT JOIN condition
	 *
	 * This method adds a RIGHT JOIN condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Foreign tablenname			
	 * @param 	mixed		The ON condition			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function rightJoin($table, $condition) {
		$this->_criteria->rightJoin($table, $condition);
		return $this;
	}
	
	/**
	 * Adds a INNER JOIN condition
	 *
	 * This method adds a INNER JOIN condition
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Foreign tablenname			
	 * @param 	mixed		The ON condition			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function innerJoin($table, $condition) {
		$this->_criteria->innerJoin($table, $condition);
		return $this;
	}
	
	/**
	 * Adds a ORDER BY
	 *
	 * This method adds a ORDER BY
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @param 	mixed		Direction: DESC = descending || ASC = ascending	. Default value ASC		
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function orderBy($name, $dir = 'ASC') {
		$this->_criteria->orderBy($name, $dir);
		return $this;
	}

	/**
	 * Adds a GROUP BY
	 *
	 * This method adds a GROUP BY
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	string		Columnname			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function groupBy($name) {
		$this->_criteria->groupBy($name);
		return $this;
	}
		
	/**
	 * Adds a LIMIT
	 *
	 * This method adds a LIMIT
	 * to the query. 
	 * Returns the own object for fluent interface.
	 *
	 * @access	public
	 * @param 	int			Limit value			
	 * @param 	int			Offset value, default to 0		
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function limit($limit, $offset = null) {
		$this->_criteria->limit($limit, $offset);
		return $this;
	}
	
	/**
	 * Execute the query
	 *
	 * Finally execute the query and
	 * get the model objects back from the
	 * doSelect-closure.
	 *
	 * @access	public
	 * @return	array		Array with model objects of the query class
	 */
	public function execute() {
		$function = $this->_executeClosure;
		return $function($this->_criteria);
	}
	
	/**
	 * Set debugging
	 *
	 * Set debugging to true or false.
	 * Also you can define to just show the query debugging echos.
	 * Per Default you will see datatypes of method parameters and 
	 * many other stuff.
	 *
	 * @access	public
	 * @param 	boolean		Debug true or false			
	 * @param 	boolean		Debug just queries, default value false			
	 * @return	Cwa\Library\Orm\Runtime\Query\FluentInterface
	 */
	public function debug($bool, $debugJustQuery = false) {
		$this->_criteria->debug($bool, $debugJustQuery);
		return $this;
	}
	
	/**
	 * Getting the builded query
	 *
	 * not implemented now
	 */
	public function getSqlQuery() {
		//return $this->_criteria->prepare($this->_from, $this->_dsn);
	}

}


?>